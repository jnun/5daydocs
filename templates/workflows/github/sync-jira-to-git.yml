name: Reconcile Jira with Git Source of Truth

on:
  schedule:
    # Run every 15 minutes to catch Jira-created tickets
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      full_scan:
        description: 'Perform full reconciliation'
        required: false
        default: 'false'

jobs:
  reconcile-jira:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.email "bot@5daydocs.local"
          git config --global user.name "5DayDocs Bot"

      - name: Reconcile Jira tickets with Git
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          # Function to call Jira API
          jira_api() {
            local method=$1
            local endpoint=$2
            local data=$3

            if [ -z "$data" ]; then
              curl -s -X $method \
                -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                -H "Content-Type: application/json" \
                "$JIRA_BASE_URL/rest/api/3/$endpoint"
            else
              curl -s -X $method \
                -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                -H "Content-Type: application/json" \
                -d "$data" \
                "$JIRA_BASE_URL/rest/api/3/$endpoint"
            fi
          }

          # Custom field for task ID (update with your field ID)
          TASK_ID_FIELD="customfield_10100"

          # Track if we made any changes
          CHANGES_MADE=false

          # Step 1: Get all Jira tickets in the project
          echo "Fetching all Jira tickets from project $JIRA_PROJECT_KEY..."
          JQL="project = $JIRA_PROJECT_KEY AND status != Done"
          ALL_TICKETS=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1000,\"fields\":[\"summary\",\"status\",\"description\",\"$TASK_ID_FIELD\",\"created\",\"labels\"]}")

          # Step 2: Get current highest task ID from Git
          CURRENT_HIGHEST_ID=$(grep "Highest Task ID:" work/STATE.md | sed 's/.*: //')
          echo "Current highest task ID in Git: $CURRENT_HIGHEST_ID"

          # Step 3: Process each Jira ticket
          echo "$ALL_TICKETS" | jq -r '.issues[] | @json' | while IFS= read -r issue; do
            ISSUE_KEY=$(echo "$issue" | jq -r '.key')
            SUMMARY=$(echo "$issue" | jq -r '.fields.summary')
            STATUS=$(echo "$issue" | jq -r '.fields.status.name')
            TASK_ID=$(echo "$issue" | jq -r ".fields.$TASK_ID_FIELD // empty")
            LABELS=$(echo "$issue" | jq -r '.fields.labels[]' | grep -v "5day-docs" | grep -v "automated" || true)

            # Check if this ticket has a 5-Day Task ID
            if [ -z "$TASK_ID" ]; then
              echo "Found Jira ticket without Task ID: $ISSUE_KEY - $SUMMARY"

              # Check if this is a user-created ticket (no 5day-docs label)
              if ! echo "$issue" | jq -r '.fields.labels[]' | grep -q "5day-docs"; then
                echo "  This appears to be a user-created ticket. Creating task file..."

                # Generate new task ID
                NEW_TASK_ID=$((CURRENT_HIGHEST_ID + 1))
                CURRENT_HIGHEST_ID=$NEW_TASK_ID

                # Determine folder based on Jira status
                case "$STATUS" in
                  "To Do")
                    if echo "$LABELS" | grep -q "sprint"; then
                      TARGET_FOLDER="work/tasks/next"
                    else
                      TARGET_FOLDER="work/tasks/backlog"
                    fi
                    ;;
                  "In Progress")
                    TARGET_FOLDER="work/tasks/working"
                    ;;
                  "In Review"|"Review"|"Code Review")
                    TARGET_FOLDER="work/tasks/review"
                    ;;
                  *)
                    TARGET_FOLDER="work/tasks/backlog"
                    ;;
                esac

                # Extract title and create task file
                TASK_TITLE=$(echo "$SUMMARY" | sed 's/^Task [0-9]*: //')
                FILENAME_DESC=$(echo "$TASK_TITLE" | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed 's/[^a-z0-9-]//g')
                TASK_FILE="$TARGET_FOLDER/$NEW_TASK_ID-$FILENAME_DESC.md"

                # Get description from Jira
                DESCRIPTION=$(echo "$issue" | jq -r '.fields.description // "No description provided"')

                # Create task file
                cat > "$TASK_FILE" <<EOF
# Task $NEW_TASK_ID: $TASK_TITLE

**Feature**: none
**Created**: $(date +%Y-%m-%d)
**Jira Ticket**: $ISSUE_KEY

## Problem
$DESCRIPTION

## Success Criteria
- [ ] Imported from Jira ticket $ISSUE_KEY
- [ ] Define specific success criteria

## Notes
This task was automatically created from Jira ticket $ISSUE_KEY.
Original ticket created in Jira, imported to maintain Git as source of truth.
EOF

                echo "  Created task file: $TASK_FILE"

                # Update Jira ticket with Task ID
                UPDATE_DATA="{
                  \"fields\": {
                    \"$TASK_ID_FIELD\": \"$NEW_TASK_ID\",
                    \"labels\": [\"5day-docs\", \"automated\", \"imported\"]
                  }
                }"
                jira_api "PUT" "issue/$ISSUE_KEY" "$UPDATE_DATA"
                echo "  Updated Jira ticket with Task ID: $NEW_TASK_ID"

                CHANGES_MADE=true
              fi
            else
              # Ticket has a Task ID - verify it exists in Git
              echo "Checking ticket $ISSUE_KEY with Task ID $TASK_ID..."

              # Look for task file
              FOUND_FILE=$(find work/tasks -name "$TASK_ID-*.md" 2>/dev/null | head -1)

              if [ -z "$FOUND_FILE" ]; then
                echo "  WARNING: Jira ticket $ISSUE_KEY references Task ID $TASK_ID but no file found in Git"
                echo "  This ticket will be orphaned until a matching task file is created"

                # Add a comment to Jira ticket
                COMMENT_DATA="{
                  \"body\": {
                    \"type\": \"doc\",
                    \"version\": 1,
                    \"content\": [
                      {
                        \"type\": \"paragraph\",
                        \"content\": [
                          {
                            \"type\": \"text\",
                            \"text\": \"Warning: No matching task file found in Git repository for Task ID $TASK_ID. Git is the source of truth - please create the task file or this ticket will be orphaned.\"
                          }
                        ]
                      }
                    ]
                  }
                }"
                jira_api "POST" "issue/$ISSUE_KEY/comment" "$COMMENT_DATA"
              else
                # File exists - verify Jira status matches folder location
                CURRENT_FOLDER=$(dirname "$FOUND_FILE")
                EXPECTED_STATUS=""

                case "$CURRENT_FOLDER" in
                  *"backlog"*)
                    EXPECTED_STATUS="To Do"
                    ;;
                  *"next"*)
                    EXPECTED_STATUS="To Do"
                    ;;
                  *"active"*)
                    EXPECTED_STATUS="In Progress"
                    ;;
                  *"review"*)
                    EXPECTED_STATUS="In Review"
                    ;;
                  *"archive"*)
                    EXPECTED_STATUS="Done"
                    ;;
                esac

                if [ "$STATUS" != "$EXPECTED_STATUS" ] && [ -n "$EXPECTED_STATUS" ]; then
                  echo "  Status mismatch: Jira shows '$STATUS', Git folder indicates '$EXPECTED_STATUS'"
                  echo "  Updating Jira to match Git (Git is source of truth)..."

                  # Find transition to correct status
                  TRANSITIONS=$(jira_api "GET" "issue/$ISSUE_KEY/transitions")
                  TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 "\"name\":\"$EXPECTED_STATUS\"" | grep '"id"' | head -1 | grep -o '[0-9]*')

                  if [ -n "$TRANSITION_ID" ]; then
                    jira_api "POST" "issue/$ISSUE_KEY/transitions" "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}"
                    echo "  Transitioned Jira ticket to: $EXPECTED_STATUS"
                  fi
                fi
              fi
            fi
          done

          # Step 4: Update STATE.md if we created new tasks
          if [ "$CURRENT_HIGHEST_ID" != "$(grep "Highest Task ID:" work/STATE.md | sed 's/.*: //')" ]; then
            echo "Updating STATE.md with new highest ID: $CURRENT_HIGHEST_ID"
            cat > work/STATE.md << EOF
# work/STATE.md

**Last Updated**: $(date +%Y-%m-%d)
**Highest Task ID**: $CURRENT_HIGHEST_ID
EOF
            CHANGES_MADE=true
          fi

          # Step 5: Check for orphaned task files (exist in Git but not in Jira)
          echo "Checking for task files without corresponding Jira tickets..."
          for task_file in work/tasks/{backlog,next,active,review}/*.md; do
            [ -f "$task_file" ] || continue

            # Skip template files
            [[ "$task_file" == *"TEMPLATE"* ]] && continue

            # Extract task ID
            TASK_ID=$(basename "$task_file" | cut -d'-' -f1)

            # Check if Jira ticket exists with this ID
            JQL="project = $JIRA_PROJECT_KEY AND \"$TASK_ID_FIELD\" ~ \"$TASK_ID\""
            SEARCH_RESULT=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1}")
            ISSUE_COUNT=$(echo "$SEARCH_RESULT" | jq '.total')

            if [ "$ISSUE_COUNT" -eq 0 ]; then
              echo "  Task file $task_file has no Jira ticket. Creating one..."

              # Read task file
              TASK_TITLE=$(grep '^# Task' "$task_file" | sed 's/# Task [0-9]*: //')
              FEATURE=$(grep '^\*\*Feature\*\*:' "$task_file" | sed 's/\*\*Feature\*\*: //' || echo "none")
              PROBLEM=$(sed -n '/## Problem/,/## Success Criteria/p' "$task_file" | sed '1d;$d' || echo "No description")

              # Determine status based on folder
              case "$task_file" in
                *"backlog"*)
                  JIRA_STATUS="To Do"
                  ;;
                *"next"*)
                  JIRA_STATUS="To Do"
                  ;;
                *"active"*)
                  JIRA_STATUS="In Progress"
                  ;;
                *"review"*)
                  JIRA_STATUS="In Review"
                  ;;
              esac

              # Create Jira ticket
              CREATE_DATA="{
                \"fields\": {
                  \"project\": {
                    \"key\": \"$JIRA_PROJECT_KEY\"
                  },
                  \"summary\": \"Task $TASK_ID: $TASK_TITLE\",
                  \"description\": {
                    \"type\": \"doc\",
                    \"version\": 1,
                    \"content\": [
                      {
                        \"type\": \"paragraph\",
                        \"content\": [
                          {
                            \"type\": \"text\",
                            \"text\": \"$PROBLEM\"
                          }
                        ]
                      }
                    ]
                  },
                  \"issuetype\": {
                    \"name\": \"Task\"
                  },
                  \"$TASK_ID_FIELD\": \"$TASK_ID\",
                  \"labels\": [\"5day-docs\", \"automated\", \"from-git\"]
                }
              }"

              RESULT=$(jira_api "POST" "issue" "$CREATE_DATA")
              NEW_KEY=$(echo "$RESULT" | jq -r '.key')
              echo "  Created Jira ticket: $NEW_KEY"
            fi
          done

          # Step 6: Commit any changes
          if [ "$CHANGES_MADE" = true ]; then
            echo "Committing changes to Git..."
            git add work/
            git commit -m "Reconcile Jira tickets with Git source of truth

- Import user-created Jira tickets as task files
- Update STATE.md with new task IDs
- Maintain Git as authoritative source" || true

            git push
            echo "Changes pushed to Git repository"
          else
            echo "No changes needed - Git and Jira are in sync"
          fi