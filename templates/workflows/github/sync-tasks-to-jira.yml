name: Sync Tasks to Jira

on:
  push:
    paths:
      - 'work/tasks/**/*.md'
    branches:
      - main

jobs:
  sync-to-jira:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed task files
        id: changed-files
        run: |
          echo "files=$(git diff --name-only HEAD^ HEAD | grep -E 'work/tasks/.*\.md' | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Sync tasks with Jira
        if: steps.changed-files.outputs.files != ''
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        run: |
          # Function to call Jira API
          jira_api() {
            local method=$1
            local endpoint=$2
            local data=$3

            if [ -z "$data" ]; then
              curl -s -X $method \
                -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                -H "Content-Type: application/json" \
                "$JIRA_BASE_URL/rest/api/3/$endpoint"
            else
              curl -s -X $method \
                -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                -H "Content-Type: application/json" \
                -d "$data" \
                "$JIRA_BASE_URL/rest/api/3/$endpoint"
            fi
          }

          # Get or create custom field for task ID (you may need to adjust this)
          # This assumes you have a custom field for tracking 5DayDocs Task IDs
          # You'll need to replace 'customfield_10100' with your actual custom field ID
          TASK_ID_FIELD="customfield_10100"

          for file in ${{ steps.changed-files.outputs.files }}; do
            # Skip template files
            if [[ "$file" == *"TEMPLATE"* ]]; then
              continue
            fi

            # Extract task ID
            TASK_ID=$(basename "$file" | cut -d'-' -f1)

            # Check if file exists (not deleted)
            if [ -f "$file" ]; then
              # File exists - create or update issue
              TASK_TITLE=$(grep '^# Task' "$file" | sed 's/# Task [0-9]*: //')
              FEATURE=$(grep '^\*\*Feature\*\*:' "$file" | sed 's/\*\*Feature\*\*: //' || echo "none")
              PROBLEM=$(sed -n '/## Problem/,/## Success Criteria/p' "$file" | sed '1d;$d' || echo "No description")
              CRITERIA=$(sed -n '/## Success Criteria/,/## Notes\|$/p' "$file" | sed '1d' || echo "No criteria defined")

              # Determine status based on folder
              case "$file" in
                *"backlog"*)
                  JIRA_STATUS="To Do"
                  STATUS_DESC="Backlog"
                  ;;
                *"next"*)
                  JIRA_STATUS="To Do"
                  STATUS_DESC="Sprint Queue"
                  ;;
                *"working"*)
                  JIRA_STATUS="In Progress"
                  STATUS_DESC="Working"
                  ;;
                *"review"*)
                  JIRA_STATUS="In Review"
                  STATUS_DESC="In Review"
                  ;;
                *"live"*)
                  JIRA_STATUS="Done"
                  STATUS_DESC="Live"
                  ;;
              esac

              # Format description for Jira (using Jira's wiki markup)
              DESCRIPTION="h2. 5DayDocs Task\\n\\n*Status*: $STATUS_DESC\\n*Feature*: $FEATURE\\n*Task File*: {{$file}}\\n\\nh2. Problem\\n$PROBLEM\\n\\nh2. Success Criteria\\n$CRITERIA\\n\\n----\\n_This issue was automatically synced from the 5DayDocs task management system._"

              # Search for existing issue with this Task ID
              JQL="project = $JIRA_PROJECT_KEY AND \"$TASK_ID_FIELD\" ~ \"$TASK_ID\""
              SEARCH_RESULT=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1}")
              ISSUE_KEY=$(echo "$SEARCH_RESULT" | grep -o '"key":"[^"]*"' | head -1 | cut -d'"' -f4)

              if [ -z "$ISSUE_KEY" ]; then
                # Create new issue
                CREATE_DATA="{
                  \"fields\": {
                    \"project\": {
                      \"key\": \"$JIRA_PROJECT_KEY\"
                    },
                    \"summary\": \"Task $TASK_ID: $TASK_TITLE\",
                    \"description\": {
                      \"type\": \"doc\",
                      \"version\": 1,
                      \"content\": [
                        {
                          \"type\": \"paragraph\",
                          \"content\": [
                            {
                              \"type\": \"text\",
                              \"text\": \"$DESCRIPTION\"
                            }
                          ]
                        }
                      ]
                    },
                    \"issuetype\": {
                      \"name\": \"Task\"
                    },
                    \"$TASK_ID_FIELD\": \"$TASK_ID\",
                    \"labels\": [\"5day-docs\", \"automated\"]
                  }
                }"

                RESULT=$(jira_api "POST" "issue" "$CREATE_DATA")
                ISSUE_KEY=$(echo "$RESULT" | grep -o '"key":"[^"]*"' | cut -d'"' -f4)
                echo "Created Jira issue $ISSUE_KEY for task $TASK_ID"
              else
                # Update existing issue
                UPDATE_DATA="{
                  \"fields\": {
                    \"summary\": \"Task $TASK_ID: $TASK_TITLE\",
                    \"description\": {
                      \"type\": \"doc\",
                      \"version\": 1,
                      \"content\": [
                        {
                          \"type\": \"paragraph\",
                          \"content\": [
                            {
                              \"type\": \"text\",
                              \"text\": \"$DESCRIPTION\"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }"

                jira_api "PUT" "issue/$ISSUE_KEY" "$UPDATE_DATA"

                # Get available transitions for the issue
                TRANSITIONS=$(jira_api "GET" "issue/$ISSUE_KEY/transitions")

                # Find the transition ID for the desired status
                # This is a simplified approach - you may need to handle multiple transitions
                case "$JIRA_STATUS" in
                  "To Do")
                    TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"To Do"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                    ;;
                  "In Progress")
                    TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"In Progress"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                    ;;
                  "In Review")
                    TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"In Review"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                    ;;
                  "Done")
                    TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"Done"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                    ;;
                esac

                # Transition the issue if we found a valid transition
                if [ -n "$TRANSITION_ID" ]; then
                  TRANSITION_DATA="{\"transition\":{\"id\":\"$TRANSITION_ID\"}}"
                  jira_api "POST" "issue/$ISSUE_KEY/transitions" "$TRANSITION_DATA"
                  echo "Updated Jira issue $ISSUE_KEY for task $TASK_ID to status: $JIRA_STATUS"
                else
                  echo "Updated Jira issue $ISSUE_KEY for task $TASK_ID (status transition not available)"
                fi
              fi
            else
              # File deleted - close issue if it exists
              JQL="project = $JIRA_PROJECT_KEY AND \"$TASK_ID_FIELD\" ~ \"$TASK_ID\""
              SEARCH_RESULT=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1}")
              ISSUE_KEY=$(echo "$SEARCH_RESULT" | grep -o '"key":"[^"]*"' | head -1 | cut -d'"' -f4)

              if [ -n "$ISSUE_KEY" ]; then
                # Add comment and transition to Done
                COMMENT_DATA="{
                  \"body\": {
                    \"type\": \"doc\",
                    \"version\": 1,
                    \"content\": [
                      {
                        \"type\": \"paragraph\",
                        \"content\": [
                          {
                            \"type\": \"text\",
                            \"text\": \"Task file deleted from repository\"
                          }
                        ]
                      }
                    ]
                  }
                }"
                jira_api "POST" "issue/$ISSUE_KEY/comment" "$COMMENT_DATA"

                # Try to transition to Done
                TRANSITIONS=$(jira_api "GET" "issue/$ISSUE_KEY/transitions")
                DONE_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"Done"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                if [ -n "$DONE_ID" ]; then
                  jira_api "POST" "issue/$ISSUE_KEY/transitions" "{\"transition\":{\"id\":\"$DONE_ID\"}}"
                fi

                echo "Closed Jira issue $ISSUE_KEY - task file deleted"
              fi
            fi
          done