# Bitbucket Pipelines configuration for Jira integration
image: atlassian/default-image:3

pipelines:
  branches:
    main:
      - step:
          name: Sync Tasks to Jira
          script:
            # Only run if task files changed
            - |
              CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E 'work/tasks/.*\.md' || true)
              if [ -z "$CHANGED_FILES" ]; then
                echo "No task files changed, skipping sync"
                exit 0
              fi

            # Function to call Jira API
            - |
              jira_api() {
                local method=$1
                local endpoint=$2
                local data=$3

                if [ -z "$data" ]; then
                  curl -s -X $method \
                    -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                    -H "Content-Type: application/json" \
                    "$JIRA_BASE_URL/rest/api/3/$endpoint"
                else
                  curl -s -X $method \
                    -H "Authorization: Basic $(echo -n $JIRA_USER_EMAIL:$JIRA_API_TOKEN | base64)" \
                    -H "Content-Type: application/json" \
                    -d "$data" \
                    "$JIRA_BASE_URL/rest/api/3/$endpoint"
                fi
              }

            # Custom field for task ID (update this with your field ID)
            - TASK_ID_FIELD="customfield_10100"

            # Process each changed task file
            - |
              for file in $CHANGED_FILES; do
                # Skip template files
                if [[ "$file" == *"TEMPLATE"* ]]; then
                  continue
                fi

                # Extract task ID
                TASK_ID=$(basename "$file" | cut -d'-' -f1)

                # Check if file exists (not deleted)
                if [ -f "$file" ]; then
                  # File exists - create or update issue
                  TASK_TITLE=$(grep '^# Task' "$file" | sed 's/# Task [0-9]*: //')
                  FEATURE=$(grep '^\*\*Feature\*\*:' "$file" | sed 's/\*\*Feature\*\*: //' || echo "none")
                  PROBLEM=$(sed -n '/## Problem/,/## Success Criteria/p' "$file" | sed '1d;$d' || echo "No description")
                  CRITERIA=$(sed -n '/## Success Criteria/,/## Notes\|$/p' "$file" | sed '1d' || echo "No criteria defined")

                  # Determine status based on folder
                  case "$file" in
                    *"backlog"*)
                      JIRA_STATUS="To Do"
                      STATUS_DESC="Backlog"
                      ;;
                    *"next"*)
                      JIRA_STATUS="To Do"
                      STATUS_DESC="Sprint Queue"
                      ;;
                    *"working"*)
                      JIRA_STATUS="In Progress"
                      STATUS_DESC="Working"
                      ;;
                    *"review"*)
                      JIRA_STATUS="In Review"
                      STATUS_DESC="In Review"
                      ;;
                    *"live"*)
                      JIRA_STATUS="Done"
                      STATUS_DESC="Live"
                      ;;
                  esac

                  # Format description for Jira
                  DESCRIPTION="h2. 5DayDocs Task\\n\\n*Status*: $STATUS_DESC\\n*Feature*: $FEATURE\\n*Task File*: {{$file}}\\n\\nh2. Problem\\n$PROBLEM\\n\\nh2. Success Criteria\\n$CRITERIA\\n\\n----\\n_This issue was automatically synced from the 5DayDocs task management system._"

                  # Search for existing issue
                  JQL="project = $JIRA_PROJECT_KEY AND \"$TASK_ID_FIELD\" ~ \"$TASK_ID\""
                  SEARCH_RESULT=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1}")
                  ISSUE_KEY=$(echo "$SEARCH_RESULT" | grep -o '"key":"[^"]*"' | head -1 | cut -d'"' -f4)

                  if [ -z "$ISSUE_KEY" ]; then
                    # Create new issue
                    CREATE_DATA="{
                      \"fields\": {
                        \"project\": {
                          \"key\": \"$JIRA_PROJECT_KEY\"
                        },
                        \"summary\": \"Task $TASK_ID: $TASK_TITLE\",
                        \"description\": {
                          \"type\": \"doc\",
                          \"version\": 1,
                          \"content\": [
                            {
                              \"type\": \"paragraph\",
                              \"content\": [
                                {
                                  \"type\": \"text\",
                                  \"text\": \"$DESCRIPTION\"
                                }
                              ]
                            }
                          ]
                        },
                        \"issuetype\": {
                          \"name\": \"Task\"
                        },
                        \"$TASK_ID_FIELD\": \"$TASK_ID\",
                        \"labels\": [\"5day-docs\", \"automated\"]
                      }
                    }"

                    RESULT=$(jira_api "POST" "issue" "$CREATE_DATA")
                    ISSUE_KEY=$(echo "$RESULT" | grep -o '"key":"[^"]*"' | cut -d'"' -f4)
                    echo "Created Jira issue $ISSUE_KEY for task $TASK_ID"
                  else
                    # Update existing issue
                    UPDATE_DATA="{
                      \"fields\": {
                        \"summary\": \"Task $TASK_ID: $TASK_TITLE\",
                        \"description\": {
                          \"type\": \"doc\",
                          \"version\": 1,
                          \"content\": [
                            {
                              \"type\": \"paragraph\",
                              \"content\": [
                                {
                                  \"type\": \"text\",
                                  \"text\": \"$DESCRIPTION\"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }"

                    jira_api "PUT" "issue/$ISSUE_KEY" "$UPDATE_DATA"

                    # Handle status transitions
                    TRANSITIONS=$(jira_api "GET" "issue/$ISSUE_KEY/transitions")

                    case "$JIRA_STATUS" in
                      "To Do")
                        TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"To Do"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                        ;;
                      "In Progress")
                        TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"In Progress"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                        ;;
                      "In Review")
                        TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"In Review"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                        ;;
                      "Done")
                        TRANSITION_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"Done"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                        ;;
                    esac

                    if [ -n "$TRANSITION_ID" ]; then
                      TRANSITION_DATA="{\"transition\":{\"id\":\"$TRANSITION_ID\"}}"
                      jira_api "POST" "issue/$ISSUE_KEY/transitions" "$TRANSITION_DATA"
                      echo "Updated Jira issue $ISSUE_KEY to status: $JIRA_STATUS"
                    fi
                  fi
                else
                  # File deleted - close issue
                  JQL="project = $JIRA_PROJECT_KEY AND \"$TASK_ID_FIELD\" ~ \"$TASK_ID\""
                  SEARCH_RESULT=$(jira_api "POST" "search" "{\"jql\":\"$JQL\",\"maxResults\":1}")
                  ISSUE_KEY=$(echo "$SEARCH_RESULT" | grep -o '"key":"[^"]*"' | head -1 | cut -d'"' -f4)

                  if [ -n "$ISSUE_KEY" ]; then
                    # Add comment and close
                    COMMENT_DATA="{
                      \"body\": {
                        \"type\": \"doc\",
                        \"version\": 1,
                        \"content\": [
                          {
                            \"type\": \"paragraph\",
                            \"content\": [
                              {
                                \"type\": \"text\",
                                \"text\": \"Task file deleted from repository\"
                              }
                            ]
                          }
                        ]
                      }
                    }"
                    jira_api "POST" "issue/$ISSUE_KEY/comment" "$COMMENT_DATA"

                    # Transition to Done
                    TRANSITIONS=$(jira_api "GET" "issue/$ISSUE_KEY/transitions")
                    DONE_ID=$(echo "$TRANSITIONS" | grep -B2 '"name":"Done"' | grep '"id"' | head -1 | grep -o '[0-9]*')
                    if [ -n "$DONE_ID" ]; then
                      jira_api "POST" "issue/$ISSUE_KEY/transitions" "{\"transition\":{\"id\":\"$DONE_ID\"}}"
                    fi
                    echo "Closed Jira issue $ISSUE_KEY"
                  fi
                fi
              done